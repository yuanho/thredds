configure(javaProjects + rootProject) {
    // The jacoco plugin adds the jacocoTestReport task, but only if the java plugin is already applied.
    apply plugin: "jacoco"

    jacoco {
        toolVersion = '0.7.5.201505241946'  // The latest version as of 2015-06-26.
    }

    tasks.withType(Test).all {
        // Add the execution data that Jacoco generates as a task output.
        outputs.file jacoco.destinationFile
    }

    // Will apply to ":<subproject>:jacocoTestReport", ":it:integrationTestReport", ":rootJacocoReport", etc.
    tasks.withType(JacocoReport).all {
        // Include all Test tasks from this project and any subprojects.
        dependsOn allprojects*.tasks*.withType(Test)

        group = 'Reports'

        List<SourceSet> mainSourceSets = javaProjects*.sourceSets*.main
        sourceDirectories = files(mainSourceSets*.allSource*.srcDirs)
        classDirectories = files(mainSourceSets*.output)

        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = false
        }
    }
}

///////////////////////////////////////////////// Root /////////////////////////////////////////////////
task rootJacocoReport(type: JacocoReport, group: 'Reports') {
    description = 'Generates an aggregate coverage report from all subprojects'

    // Add source and class directories for the :buildSrc project. Note that by this time in the 'thredds' config,
    // :buildSrc has already run as a *separate* build (see http://stackoverflow.com/questions/26597147),
    // so we cannot programmatically access its Project object to retrieve these paths.
    sourceDirectories = sourceDirectories + files('buildSrc/src/main/groovy')
    classDirectories  = classDirectories  + files('buildSrc/build/classes/main')

    // :buildSrc:test always runs and produces execution data, no matter what.
    assert file('buildSrc/build/jacoco/test.exec').exists() : "Can't find :buildSrc Jacoco execution data."

    // By default, JacocoReport will be skipped if ANY of its executionData are non-existent: http://goo.gl/pHuwyg
    // So, we're going to start off with the only executionData we KNOW exists. As for the subprojects' executionData,
    // we won't know what's available until after they run their 'test' tasks (if they run at all). So, delay that
    // config until doFirst{}, which will run during Gradle's execution phase.
    executionData = files('buildSrc/build/jacoco/test.exec')

    // Causes rootJacocoReport to always be executed. This is necessary because JacocoReport uses executionData as one
    // of its Inputs, and by assigning an incomplete set above, the normal UP-TO-DATE machinery has been subverted.
    // As a result, rootJacocoReport can't properly determine when subprojects have generated new coverage data
    // (it thinks its executionData Inputs are always UP-TO-DATE). We'll try to detect those changes manually below.
    outputs.upToDateWhen { false }  // Evaluated at configuration time (onlyIf{} is evaluated at execution time)

    doFirst {
        Closure isExtendedByJacoco = { Task task -> task.extensions.findByType(JacocoTaskExtension) }
        Collection<Task> tasksExtendedByJacoco = subprojects*.tasks*.matching(isExtendedByJacoco).flatten()
        Collection<File> exeData = tasksExtendedByJacoco*.jacoco*.destinationFile

        // Add all subproject executionData that actually exist.
        executionData = executionData + files(exeData.findAll { it.exists() })

        boolean allOutputsExist = outputs.files.every { it.exists() }
        boolean anyJacocoTaskDidWork = tasksExtendedByJacoco.any { it.didWork }

        // Skip task if all outputs exist (previously generated) and no Jacoco tasks did any work (meaning that the
        // Inputs didn't change). This manual UP-TO-DATE checking is certainly inferior to Gradle's built-in machinery
        // (this doesn't detect modifications to outputs, for example), but it's good enough given the circumstances.
        // The long-term solution may be to reimplement JacocoReport with the troublesome elements removed.
        if (allOutputsExist && !anyJacocoTaskDidWork) {
            throw new StopExecutionException("SKIPPING $name: outputs already exist and no Jacoco tasks did work.")
        }
    }
}

apply plugin: "base"  // Gives us the "clean" task for removing rootJacocoReport's output.

apply plugin: "com.github.kt3k.coveralls"

/*
 * Ordinarily, I'd be able to configure the "coveralls" task by using the "coveralls(Closure)" dynamic method added to
 * Project when the above plugin is applied. However, the plugin also adds an extension with the same name (see
 * http://goo.gl/GVE4v6). As a result, Project now has TWO dynamic methods with the "coveralls(Closure)" signature.
 *
 * Which method takes precedence: the one that configures the extension or the one that configures the task? I can't
 * find a definitive answer, but the Gradle docs (http://goo.gl/KPXLpf) seem to indicate that the extension wins
 * (it appears earlier in the list--hardly definitive, I know).
 *
 * Operating under this assumption, we must explicitly indicate that we are configuring the "coveralls" task.
 * Why not just create a new task of type CoverallsTask? Something like "task coverallsReport(type: CoverallsTask)"?
 *
 * Unfortunately, that gives an error: "Extension of type 'CoverallsPluginExtension' does not exist", originating
 * from here: http://goo.gl/HAZk1L. The behavior does not occur when the task is defined in the root build script,
 * meaning it's most likely a Gradle bug, not a coveralls-gradle-plugin bug. That's not surprising: there are lots
 * of weird and poorly-defined limitations about what you can and can't do in a script plugin.
 */
tasks.coveralls {
    group = 'Reports'
    description = 'Uploads the aggregate coverage report to Coveralls'
    dependsOn rootJacocoReport

    // This task logs the entire coveralls.io JSON payload (~27 MB) to the INFO log level. We don't want to see it.
    logging.level = LogLevel.LIFECYCLE

    // We want to add the COVERALLS_REPO_TOKEN entry, but coveralls.env is an UnmodifiableMap.
    // So, create a copy of env, add our entry, then replace the old map with it.
    // FIXME: In production, COVERALLS_REPO_TOKEN should be an environment variable.
    Map<String, String> envCopy = new HashMap<>(env)
    envCopy["COVERALLS_REPO_TOKEN"] = "viswgi0kF5EOgHJXEb58OrOZzToIbi0oJ"
    env = envCopy

    // Configure the "coveralls" extension. These properties only appear on the extension, not the task.
    coveralls {
        jacocoReportPath = tasks.rootJacocoReport.reports.xml.destination
        sourceDirs = tasks.rootJacocoReport.sourceDirectories.files.collect { it.getPath() }
    }
}
